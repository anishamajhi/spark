# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class BatteryStat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBatteryStat(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatteryStat()
        x.Init(buf, n + offset)
        return x

    # BatteryStat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BatteryStat
    def BatteryPercentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BatteryStat
    def StateOfHealth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BatteryStat
    def StateOfCharge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BatteryStat
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BatteryStat
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BatteryStat
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BatteryStat
    def CellId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BatteryStat
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BatteryStat
    def DeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BatteryStatStart(builder): builder.StartObject(9)
def BatteryStatAddBatteryPercentage(builder, batteryPercentage): builder.PrependInt32Slot(0, batteryPercentage, 0)
def BatteryStatAddStateOfHealth(builder, stateOfHealth): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stateOfHealth), 0)
def BatteryStatAddStateOfCharge(builder, stateOfCharge): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stateOfCharge), 0)
def BatteryStatAddLatitude(builder, latitude): builder.PrependFloat64Slot(3, latitude, 0.0)
def BatteryStatAddLongitude(builder, longitude): builder.PrependFloat64Slot(4, longitude, 0.0)
def BatteryStatAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def BatteryStatAddCellId(builder, cellId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cellId), 0)
def BatteryStatAddUserId(builder, userId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)
def BatteryStatAddDeviceId(builder, deviceId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(deviceId), 0)
def BatteryStatEnd(builder): return builder.EndObject()
