# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class AppStat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAppStat(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AppStat()
        x.Init(buf, n + offset)
        return x

    # AppStat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AppStat
    def PackageName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def AppName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def AppCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def AppInstallTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def AppLaunchCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def TimeSpentInForeground(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def LastEventPerformed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def LastOpened(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def AppSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def AppCacheSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AppStat
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # AppStat
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # AppStat
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def CellId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AppStat
    def DeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AppStatStart(builder): builder.StartObject(16)
def AppStatAddPackageName(builder, packageName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(packageName), 0)
def AppStatAddAppName(builder, appName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(appName), 0)
def AppStatAddAppCategory(builder, appCategory): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(appCategory), 0)
def AppStatAddAppInstallTime(builder, appInstallTime): builder.PrependInt64Slot(3, appInstallTime, 0)
def AppStatAddAppLaunchCount(builder, appLaunchCount): builder.PrependInt32Slot(4, appLaunchCount, 0)
def AppStatAddTimeSpentInForeground(builder, timeSpentInForeground): builder.PrependInt64Slot(5, timeSpentInForeground, 0)
def AppStatAddLastEventPerformed(builder, lastEventPerformed): builder.PrependInt64Slot(6, lastEventPerformed, 0)
def AppStatAddLastOpened(builder, lastOpened): builder.PrependInt64Slot(7, lastOpened, 0)
def AppStatAddAppSize(builder, appSize): builder.PrependInt64Slot(8, appSize, 0)
def AppStatAddAppCacheSize(builder, appCacheSize): builder.PrependInt64Slot(9, appCacheSize, 0)
def AppStatAddLatitude(builder, latitude): builder.PrependFloat64Slot(10, latitude, 0.0)
def AppStatAddLongitude(builder, longitude): builder.PrependFloat64Slot(11, longitude, 0.0)
def AppStatAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def AppStatAddCellId(builder, cellId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(cellId), 0)
def AppStatAddUserId(builder, userId): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)
def AppStatAddDeviceId(builder, deviceId): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(deviceId), 0)
def AppStatEnd(builder): return builder.EndObject()
