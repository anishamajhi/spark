# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class AddDeviceInfoRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAddDeviceInfoRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddDeviceInfoRequest()
        x.Init(buf, n + offset)
        return x

    # AddDeviceInfoRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AddDeviceInfoRequest
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def DeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Phone1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Phone2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Imei1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Imei2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def SdkVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Manufacturer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def MobileCarrier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def IsDeviceToxic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AddDeviceInfoRequest
    def DeviceIp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def AndroidVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # AddDeviceInfoRequest
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # AddDeviceInfoRequest
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AddDeviceInfoRequest
    def CellId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AddDeviceInfoRequestStart(builder): builder.StartObject(18)
def AddDeviceInfoRequestAddUserId(builder, userId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)
def AddDeviceInfoRequestAddDeviceId(builder, deviceId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(deviceId), 0)
def AddDeviceInfoRequestAddPhone1(builder, phone1): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(phone1), 0)
def AddDeviceInfoRequestAddPhone2(builder, phone2): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(phone2), 0)
def AddDeviceInfoRequestAddImei1(builder, imei1): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(imei1), 0)
def AddDeviceInfoRequestAddImei2(builder, imei2): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(imei2), 0)
def AddDeviceInfoRequestAddSerialNumber(builder, serialNumber): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)
def AddDeviceInfoRequestAddSdkVersion(builder, sdkVersion): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(sdkVersion), 0)
def AddDeviceInfoRequestAddManufacturer(builder, manufacturer): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturer), 0)
def AddDeviceInfoRequestAddModel(builder, model): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)
def AddDeviceInfoRequestAddMobileCarrier(builder, mobileCarrier): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(mobileCarrier), 0)
def AddDeviceInfoRequestAddIsDeviceToxic(builder, isDeviceToxic): builder.PrependBoolSlot(11, isDeviceToxic, 0)
def AddDeviceInfoRequestAddDeviceIp(builder, deviceIp): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(deviceIp), 0)
def AddDeviceInfoRequestAddAndroidVersion(builder, androidVersion): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(androidVersion), 0)
def AddDeviceInfoRequestAddLatitude(builder, latitude): builder.PrependFloat64Slot(14, latitude, 0.0)
def AddDeviceInfoRequestAddLongitude(builder, longitude): builder.PrependFloat64Slot(15, longitude, 0.0)
def AddDeviceInfoRequestAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def AddDeviceInfoRequestAddCellId(builder, cellId): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(cellId), 0)
def AddDeviceInfoRequestEnd(builder): return builder.EndObject()
